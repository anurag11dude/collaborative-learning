// NOTE: see docs/firebase-schema.md to see a visual heirarchy of these interfaces

interface DBPortalUser {
  version: "1.0";
  self: {
    uid: number
  };
  latestGroupId: number;
  documentMetadata: DBDocumentMetadataMap;
  documents: DBDocumentMap;
}

interface DBDocumentMetadataMap {
  // documentKey is same value as DBDocumentMap
  [key /* documentKey */: string]: DBDocumentMetadata;
}

interface DBDocumentMap {
  // documentKey is generated by push to DBDocumentMap
  [key /* documentKey */: string]: DBDocument;
}

interface DBDocumentMetadata {
  version: "1.0";
  self: {
    uid: number;
    documentKey: string;
  };
  createdAt: number|object;
  // TDB: serialized document model metadata (back pointers too)
}

interface DBDocument {
  version: "1.0";
  self: {
    uid: number;
    documentKey: string;
  };
  // TDB: serialized document model contents
}

interface DBClass {
  version: "1.0";
  self: {
    classHash: string;
  };
  offerings: DBOfferingMap;
}

interface DBOfferingMap {
  [key /* offeringId */: number]: DBOffering;
}

interface DBOffering {
  version: "1.0";
  self: {
    classHash: string;
    offeringId: number;
  };
  users: DBOfferingUserMap;
  groups: DBOfferingGroupMap;
}

interface DBOfferingUserMap {
  [key /* uid */: number]: DBOfferingUser;
}

interface DBOfferingGroupMap {
  [key /* groupId */: number]: DBOfferingGroup;
}

interface DBOfferingUser {
  version: "1.0";
  self: {
    classHash: string;
    offeringId: number;
    uid: number;
  };
  sectionDocuments: DBOfferingUserSectionDocumentMap;
  // TDB: store ui information here?
}

interface DBOfferingUserSectionDocumentMap {
  [key /* sectionId */: string]: DBOfferingUserSectionDocument;
}

interface DBOfferingUserSectionDocument {
  version: "1.0";
  self: {
    classHash: string;
    offeringId: number;
    uid: number;
    sectionId: string;
  };
  visibility: "public" | "private";
  documentKey: string; // firebase id of portal user document
}

interface DBOfferingGroup {
  version: "1.0";
  self: {
    classHash: string;
    offeringId: number;
    groupId: number;
  };
  users: DBOfferingGroupUserMap;
}

interface DBOfferingGroupUserMap {
  [key /* uid */: number]: DBOfferingGroupUser;
}

interface DBOfferingGroupUser {
  version: "1.0";
  self: {
    classHash: string;
    offeringId: number;
    groupId: number;
    uid: number;
  };
  connected: boolean; // MAYBE: check if timestamp is overwritten locally
  connectedTimestamp: number|object;
  disconnectedTimestamp: number|object;
}
